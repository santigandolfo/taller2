swagger: '2.0'
info:
  description: ''
  version: 1.0.0
  title: Fiuber Application Server
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: fiuber@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: fiuber
basePath: /v2
tags:
  - name: security
    description: Security operations
  - name: user
    description: Operations about users
  - name: rider
    description: Operations about riders
  - name: driver
    description: Operations about drivers
  - name: request
    description: Operations about requests
  - name: trip
    description: Operations about trips
schemes:
  - http
paths:
  /security:
    post:
      tags:
        - security
      summary: User login
      description: ''
      operationId: login
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: username
          in: formData
          description: username
          required: true
          type: string
        - name: password
          in: formData
          description: password
          required: true
          type: string
      responses:
        '200':
          description: Succesful login
          schema:
            type: string
        '403':
          description: Username or password is incorrect
  '/security/{userID}':
    delete:
      tags:
        - security
      summary: User logout
      description: ''
      operationId: logout
      produces:
        - application/json
      parameters:
        - name: userID
          in: path
          description: User ID to delete
          required: true
          type: string
      responses:
        '204':
          description: Succesful logout
        '403':
          description: Unauthorized
        '404':
          description: User not found
  /users:
    post:
      tags:
        - user
      summary: Register a new user
      description: ''
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User object that needs to be registered into the system
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Successful user registration
        '422':
          description: Error
  '/users/{userID}':
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: userID
          in: path
          description: ID of user to return
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Deletes a user
      description: ''
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: userID
          in: path
          description: User ID to delete
          required: true
          type: string
      responses:
        '204':
          description: User deleted
        '403':
          description: Unauthorized
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user's profile
      description: ''
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userID
          in: path
          description: ID of user to update
          required: true
          type: string
        - in: body
          name: body
          description: User object that needs to be updated into the system
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '204':
          description: User updated
        '403':
          description: Unauthorized
        '404':
          description: User not found
  '/users/{userID}/coordinates':
    put:
      tags:
        - user
      summary: Update user's gps coordinates
      description: ''
      operationId: updateUserCoordinates
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userID
          in: path
          description: ID of user to update
          required: true
          type: string
        - in: body
          name: body
          description: New gps coordinates
          required: true
          schema:
            $ref: '#/definitions/Coordinates'
      responses:
        '204':
          description: User's coordinates updated
        '403':
          description: Unauthorized
        '404':
          description: User not found
  '/riders/{riderID}/card':
    put:
      tags:
        - rider
      summary: Update rider's Credit/Debit card information
      description: ''
      operationId: updateRidersCard
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: riderID
          in: path
          description: ID of the rider/user
          required: true
          type: string
        - in: body
          name: body
          description: card object that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/Card'
      responses:
        '204':
          description: User's card information updated
        '403':
          description: Unauthorized
        '404':
          description: Rider not found
  '/riders/{riderID}/request':
    put:
      tags:
        - rider
        - request
      summary: Submit a trip request
      description: ''
      operationId: submitRequest
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: riderID
          in: path
          description: ID of the rider/user
          required: true
          type: string
        - in: body
          name: body
          description: Information about the trip requested
          required: true
          schema:
            $ref: '#/definitions/Request'
      responses:
        '204':
          description: Request submitted
        '403':
          description: Unauthorized
        '404':
          description: Rider not found
    delete:
      tags:
        - request
        - rider
      summary: Cancel a rider's request
      description: ''
      operationId: deleteRequest
      produces:
        - application/json
      parameters:
        - name: riderID
          in: path
          description: ID of the rider/user
          required: true
          type: string
      responses:
        '204':
          description: Request deleted
        '403':
          description: Unauthorized
        '404':
          description: Rider not found
  '/drivers/{driverID}/car':
    put:
      tags:
        - driver
      summary: Update driver's car information
      description: ''
      operationId: updateDriversCar
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: driverID
          in: path
          description: ID of the driver/user
          required: true
          type: string
        - in: body
          name: body
          description: car object that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/Car'
      responses:
        '204':
          description: Driver's car information updated
        '403':
          description: Unauthorized
        '404':
          description: Driver not found
  '/drivers/{driverID}/trip':
    put:
      tags:
        - trip
        - driver
      summary: Register a trip
      description: ''
      operationId: addTrip
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: driverID
          description: ID of the driver/user
          required: true
          type: string
        - in: body
          name: body
          description: Trip object that needs to be registered into the system
          required: true
          schema:
            $ref: '#/definitions/Trip'
      responses:
        '204':
          description: Trip registered
        '403':
          description: Unauthorized
        '404':
          description: Driver not found
    delete:
      tags:
        - trip
        - driver
      summary: Finish and Collect a trip
      description: ''
      operationId: finishTrip
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: driverID
          description: ID of the driver/user
          required: true
          type: string
      responses:
        '204':
          description: OK
        '403':
          description: Unauthorized
        '404':
          description: Driver not found
  '/drivers/{driverID}':
    patch:
      tags:
        - driver
      summary: Change the driver's duty status
      description: ''
      operationId: changeDriverStatus
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: driverID
          description: ID of the driver/user
          required: true
          type: string
        - in: body
          name: body
          description: new status
          required: true
          schema:
            type: string
      responses:
        '204':
          description: status changed
        '403':
          description: Unauthorized
        '404':
          description: Driver not found
  /drivers/available:
    get:
      tags:
        - driver
      summary: Return available drivers
      description: ''
      operationId: getDrivers
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /requests:
    get:
      tags:
        - request
      summary: Return available requests
      description: ''
      operationId: getRequests
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Request'
  '/requests/{requestID}/routes':
    get:
      tags:
        - request
      summary: Return possible ways to make it to destination
      description: ''
      operationId: getRoutes
      produces:
        - application/json
      parameters:
        - in: path
          name: requestID
          description: ID of the corresponding request
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Route'
        '404':
          description: Request not found
  '/requests/{requestID}/costEstimate':
    get:
      tags:
        - request
      summary: Return an estimated cost of the ride
      description: ''
      operationId: getCostEstimation
      produces:
        - application/json
      parameters:
        - in: path
          name: requestID
          description: ID of the corresponding request
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: number
            format: float
        '404':
          description: Request not found
definitions:
  User:
    type: object
    properties:
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
        description: Rider or Driver
        enum:
          - rider
          - driver
  Car:
    type: object
    properties:
      model:
        type: string
      color:
        type: string
      plate:
        type: string
      year:
        type: integer
        format: int32
      ac:
        type: boolean
      status:
        type: string
        enum:
          - very good
          - good
          - regular
          - bad
          - terrible
  Card:
    type: object
    properties:
      name:
        type: string
      number:
        type: integer
        format: int64
      expiration:
        type: string
        format: date
      secNumber:
        type: integer
        format: int32
      type:
        type: string
        enum:
          - credit
          - debit
  Coordinates:
    type: object
    properties:
      latitude:
        type: number
        format: float
      longitude:
        type: number
        format: float
  Request:
    type: object
    properties:
      rider:
        type: string
      latInit:
        type: number
        format: float
      longInit:
        type: number
        format: float
      latFinal:
        type: number
        format: float
      longFinal:
        type: number
        format: float
  Trip:
    type: object
    properties:
      requestID:
        type: integer
        format: int32
      rider:
        type: string
  Route:
    type: object
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
